#!/usr/bin/env python3

bootrom_start = [
    # dd if=bootrom.bin bs=256 count=1 | xxd -p -c 16 | sed 's:..:0x&, :g'
    0x00, 0x1f, 0x04, 0x20, 0xeb, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 
    0x4d, 0x75, 0x01, 0x03, 0x7a, 0x00, 0xc4, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x23, 0x02, 0x88, 
    0x9a, 0x42, 0x03, 0xd0, 0x43, 0x88, 0x04, 0x30, 0x91, 0x42, 0xf7, 0xd1, 0x18, 0x1c, 0x70, 0x47, 
    0x30, 0xbf, 0xfd, 0xe7, 0xf4, 0x46, 0x00, 0xf0, 0x05, 0xf8, 0xa7, 0x48, 0x00, 0x21, 0x01, 0x60, 
    0x41, 0x60, 0xe7, 0x46, 0xa5, 0x48, 0x00, 0x21, 0xc9, 0x43, 0x01, 0x60, 0x41, 0x60, 0x70, 0x47, 
    0xca, 0x9b, 0x0d, 0x5b, 0xf9, 0x1d, 0x00, 0x00, 0x28, 0x43, 0x29, 0x20, 0x32, 0x30, 0x32, 0x30, 
    0x20, 0x52, 0x61, 0x73, 0x70, 0x62, 0x65, 0x72, 0x72, 0x79, 0x20, 0x50, 0x69, 0x20, 0x54, 0x72, 
    0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x4c, 0x74, 0x64, 0x00, 0x50, 0x33, 0x09, 0x03, 0x52, 0x33, 
    0x2d, 0x03, 0x4c, 0x33, 0x57, 0x03, 0x54, 0x33, 0x8f, 0x03, 0x4d, 0x53, 0xb9, 0x26, 0x53, 0x34, 
    0xad, 0x26, 0x4d, 0x43, 0x1d, 0x26, 0x43, 0x34, 0x05, 0x26, 0x55, 0x42, 0x91, 0x25, 0x44, 0x54, 
    0xa9, 0x01, 0x44, 0x45, 0xaf, 0x01, 0x57, 0x56, 0x45, 0x01, 0x49, 0x46, 0x91, 0x24, 0x45, 0x58, 
    0xe5, 0x23, 0x52, 0x45, 0x6d, 0x23, 0x52, 0x50, 0xb5, 0x23, 0x46, 0x43, 0x51, 0x23, 0x43, 0x58, 
    0x21, 0x23, 0x00, 0x00, 0x47, 0x52, 0x50, 0x00, 0x43, 0x52, 0x58, 0x00, 0x53, 0x46, 0xcc, 0x01, 
    0x53, 0x44, 0x4c, 0x02, 0x46, 0x5a, 0xca, 0x01, 0x46, 0x53, 0x34, 0x27, 0x46, 0x45, 0x28, 0x2e, 
    0x44, 0x53, 0x30, 0x2e, 0x44, 0x45, 0xa4, 0x3d, 0x00, 0x00, 0x7d, 0x48, 0x01, 0x68, 0x00, 0x29, 
    0x28, 0xd1, 0xff, 0xf7, 0x9f, 0xff, 0x7b, 0x49, 0x0a, 0x68, 0x53, 0x0e, 0x01, 0xd3, 0x0a, 0x60, 
]

def uint32_t_at(addr):
    return sum( bootrom_start[addr+i]<<(i*8) for i in range(4) )

def print_buffer(buf):
    print (''.join( "{:02x}".format(c) for c in buf) )

sizeof_uint32_t = 4

def keygen():

    b0 = uint32_t_at(0x61)
    b1 = uint32_t_at(0x61 + 1*sizeof_uint32_t) # pointer arithmetic, you sneaky bastard

    def bytesum(n):
        return sum( (n>>i)&0xff for i in (0,8,16,24) )&0xff

    return [ bytesum( ( b0 + (255*i//64)*(b1-b0)// 256 ) & 0xffffffff ) for i in range(64) ]

key = keygen()

base2=0
def op(a,b):
    return (a+b+base2)&0xff

def rev_op(a,b):
    return (a-b-base2)&0xff


def forward_operation(data, key):
    for i in range(63):
        data[i] = op(data[i],key[i])
    
    for i in range(63):
        data[i+1] = op(data[i],data[i+1])
    
    for i in range(63):
        data[62-i] = op(data[62-i],data[63-i])

    return data

def backward_operation(data, key):
    for i in range(62,-1,-1):
        data[62-i] = rev_op(data[62-i],data[63-i])

    for i in range(62,-1,-1):
        data[i+1] = rev_op(data[i+1],data[i])

    for i in range(62,-1,-1):
        data[i] = rev_op(data[i],key[i])

    return data


data = [
    0xca, 0xec, 0x1d, 0x1a, 0xe7, 0x9d, 0x2c, 0x50,
    0x21, 0x5c, 0x17, 0x14, 0x74, 0x17, 0xe8, 0xd8,
    0xa3, 0x6c, 0x17, 0x8b, 0xb7, 0x83, 0xe6, 0xc0,
    0x01, 0x65, 0x06, 0xda, 0x95, 0x55, 0xd3, 0x26,
    0x10, 0x7a, 0x50, 0xac, 0x50, 0x58, 0xad, 0x0b,
    0x44, 0xa9, 0x25, 0xa4, 0x11, 0x58, 0x64, 0x21,
    0x7b, 0x5e, 0xb5, 0x6b, 0x6c, 0xa4, 0xfe, 0x66,
    0xc8, 0x10, 0x29, 0xff, 0x7d, 0x8f, 0x20, 0x1c
]

test_data = list(range(64))

print("sanity check:")
print("test data, from:")
print_buffer(test_data)
print("to:")
test_garbled = forward_operation(test_data, key)
print_buffer(test_garbled)
print("back to:")
test_restored = backward_operation(test_garbled, key)
print_buffer(test_restored)
assert ( test_data == test_restored )

print()
print("challenge data:")
restored = backward_operation(data, key)
print_buffer(restored)

def remove_padding(data):
    padding_val = data[-1]
    assert(data[-padding_val:] == [padding_val]* padding_val)
    return data[:-padding_val]


print("padding removed:")
final = remove_padding(restored)
print_buffer(final)

print()
print("flag: ", bytes(final).decode('ascii'))
